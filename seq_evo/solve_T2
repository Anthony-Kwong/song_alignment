using JuMP, PolyJuMP, LinearAlgebra

A = [0.1 0.2 0.3; 0.2 0.3 0.4; 0.7 0.5 0.3]
B = [0.15 0.2 0.3; 0.2 0.35 0.45; 0.65 0.45 0.25]

m = Model( PolyJuMP.KKT.Optimizer)

K = size(A,1)
N = size(A,2)
#define variables
@variable(m, 0<= T[1:K, 1:K] <= 1)
#@NLobjective(m, Min, sum(Y-T*X)^2 ), what I meant but Julia doesn't like it so code below.
@NLobjective(m, Min, sum((B[i, j] - sum(T[i, k] * A[k, j] for k in 1:K))^2 for i in 1:K, j in 1:N))
@constraint(m, [i = 1:K], sum(T[i, j] for j in 1:K) == 1)

optimize!(m)


println("** Optimal objective function value = ", JuMP.objective_value(m))
JuMP.value(T)